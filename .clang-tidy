Checks: >
  *,
  -abseil-*,
  -altera-*,
  -android-*,
  -darwin-*,
  -fuchsia-*,
  -linuxkernel-*,
  -google-objc-*,
  -llvm-*,
  -llvmlibc-*,
  -mpi-*,
  -openmp-*,
  -portability-*,
  -zircon-*,
  -clang-analyzer-webkit*,
  
  bugprone-*,
  cert-*,
  concurrency-*,
  cppcoreguidelines-*,
  clang-analyzer-*,
  google-*,
  hicpp-*,
  misc-*,
  modernize-*,
  performance-*,
  readability-*,
  
  -google-build-using-namespace,
  -modernize-use-trailing-return-type,n 
  -readability-operators-representation,

  llvm-namespace-comment,  


CheckOptions:
  - { key: readability-identifier-naming.NamespaceCase,          value: lower_case }
  - { key: readability-identifier-naming.ClassCase,              value: CamelCase  }
  - { key: readability-identifier-naming.ConceptCase,            value: CamelCase  }
  - { key: readability-identifier-naming.StructCase,             value: CamelCase  }
  - { key: readability-identifier-naming.TemplateParameterCase,  value: CamelCase  }
  - { key: readability-identifier-naming.FunctionCase,           value: camelBack  }
  - { key: readability-identifier-naming.VariableCase,           value: camelBack  }
  - { key: readability-identifier-naming.ClassMemberCase,        value: camelBack  }
  - { key: readability-identifier-naming.PrivateMemberCase,      value: camelBack  }
  - { key: readability-identifier-naming.ClassMemberSuffix,      value: _          }
  - { key: readability-identifier-naming.PrivateMemberSuffix,    value: _          }
  - { key: readability-identifier-naming.ProtectedMemberSuffix,  value: _          }
  - { key: readability-identifier-naming.EnumConstantCase,         value: CamelCase }
  - { key: readability-identifier-naming.EnumConstantPrefix,       value: k         }
  - { key: readability-identifier-naming.ConstexprVariableCase,    value: CamelCase }
  - { key: readability-identifier-naming.ConstexprVariablePrefix,  value: k         }
  - { key: readability-identifier-naming.GlobalConstantCase,       value: CamelCase }
  - { key: readability-identifier-naming.GlobalConstantPrefix,     value: k         }
  - { key: readability-identifier-naming.MemberConstantCase,       value: CamelCase }
  - { key: readability-identifier-naming.MemberConstantPrefix,     value: k         }
  - { key: readability-identifier-naming.StaticConstantCase,       value: CamelCase }
  - { key: readability-identifier-naming.StaticConstantPrefix,     value: k         }
    
  - { key: readability-implicit-bool-conversion.AllowIntegerConditions,  value: true}
  - { key: readability-implicit-bool-conversion.AllowPointerConditions,  value: true}
  - { key: readability-function-cognitive-complexity.IgnoreMacros,  value: 1        }
  - { key: readability-function-cognitive-complexity.Threshold,     value: 40       }
  - { key: readability-redundant-member-init.IgnoreBaseInCopyConstructors, value: true }
  - { key: readability-inconsistent-declaration-parameter-name.Strict,  value: true }
    
  - { key: bugprone-misplaced-widening-cast.CheckImplicitCast,   value: true        }
  - { key: readability-braces-around-statements.ShortStatementLines, value: 2       }
  - { key: llvm-namespace-comment.SpacesBeforeComments,          value: 2           }
  - { key: misc-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic, value: true }
    
  # Should be excluded in future
  # to fix error with c++20 : invalid case style for template parameter 'expr-type' 
  # There is no error with c++17 or older. It is most probably a bug, for more inforemation 
  # look at https://stackoverflow.com/questions/68475958/clang-tidy-emits-warning-when-compiling-with-c20-enabled
  - {key: readability-identifier-naming.TypeTemplateParameterIgnoredRegexp, value: expr-type}
  
